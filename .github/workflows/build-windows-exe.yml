name: 构建并发布 Windows 可执行文件

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write  # 授予写入权限，用于创建 Release 和推送标签
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整 Git 历史以便读取标签

      # 设置 Python 环境
      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # 使用 PyInstaller 打包为 .exe
      - name: 使用 PyInstaller 打包
        run: |
          pyinstaller --onefile --name ExHentaiFavorites --console main.py

      # 生成版本号
      - name: 生成版本号
        id: version
        run: |
          $current_tag = git tag --sort=-v:refname | Select-Object -First 1
          if (-not $current_tag) {
            $new_tag = "v1.0.0"
          } else {
            $version_numbers = $current_tag -replace '^v', '' -split '\.'
            $patch = [int]$version_numbers[2] + 1
            $new_tag = "v$($version_numbers[0]).$($version_numbers[1]).$patch"
          }
          echo "NEW_TAG=$new_tag" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # 创建并推送标签
      - name: 创建并推送标签
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.NEW_TAG }}
          git push origin ${{ steps.version.outputs.NEW_TAG }}

      # 创建 GitHub Release
      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.NEW_TAG }}
          name: Release ${{ steps.version.outputs.NEW_TAG }}
          body: 自动创建的 Release
          draft: false
          prerelease: false
          files: dist/ExHentaiFavorites.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}