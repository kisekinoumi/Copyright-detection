name: Build and Release EXE

on:
  push:
    branches:
      - main # 或者您的主分支名称，例如 master

jobs:
  build:
    runs-on: windows-latest # 指定在 Windows 环境运行

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 检出您的仓库代码

    - name: Set up Python
      uses: actions/setup-python@v5 # 设置 Python 环境
      with:
        python-version: '3.x' # 您可以指定具体的 Python 版本，例如 '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller requests beautifulsoup4
        # 如果您有 requirements.txt 文件，可以替换为:
        # pip install -r requirements.txt
        # pip install pyinstaller
      shell: bash # 明确指定使用 bash shell 来执行 run 命令

    - name: Build executable with PyInstaller
      run: pyinstaller --name ExHentaiChecker --onefile your_script_name.py
      # --name: 指定输出的 exe 文件名 (不含 .exe 后缀)
      # --onefile: 将所有依赖打包进单个 exe 文件
      # your_script_name.py: 将这里替换成您的 Python 脚本文件名
      shell: bash

    - name: Generate Release Tag
      id: tag_generator
      run: echo "tag_name=release-$(git rev-parse --short HEAD)" >> $env:GITHUB_ENV
      # 使用当前 commit 的短 SHA 作为标签的一部分，确保唯一性
      shell: bash

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v2 # 使用社区提供的 action 来创建 Release
      with:
        tag_name: ${{ env.tag_name }} # 使用上一步生成的标签
        name: "Release ${{ env.tag_name }}" # Release 的标题
        files: dist/ExHentaiChecker.exe # 指定要上传的文件路径 (PyInstaller 默认输出到 dist 目录)
        draft: false # 设置为 false 直接发布，true 则创建草稿 Release
        prerelease: false # 设置为 false 标记为正式版，true 标记为预发布版
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 自动提供的 Token 进行认证
```